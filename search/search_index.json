{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#eevee-chat","title":"Eevee Chat","text":"<p>Eevee Chat is a unified chat UI for all LLM frameworks. It allows you to use GPT, Claude and many others from the same window, and switch between them even in the middle of a conversation.</p> <p>Using Eevee is simple and intuitive. LLMs are connected to the web (supporting LLMs only) with either Google Search or DuckDuckGo, and so it suppose to mimic working with the official web apps.</p> <p>Eevee can also be configured to support custom frameworks and tools easily. See the docs for more information.</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>Install Eevee Chat from PyPi: <pre><code>pip install eevee-chat\n</code></pre></p>"},{"location":"#running","title":"Running","text":"<p>Once installed (and after frameworks were setup), simply run: <pre><code>eevee\n</code></pre> Eevee Chat will automatically launch on <code>127.0.0.1:4242</code> by default. </p> <p>To change the port, run: <pre><code>eevee -p [port]\n</code></pre></p>"},{"location":"frameworks/","title":"Frameworks &amp; Models","text":""},{"location":"frameworks/#supported-frameworks","title":"Supported Frameworks","text":"<p>The following frameworks are currently supported:</p> <ul> <li>OpenAI: <code>OPENAI_API_KEY</code></li> <li>Anthropic: <code>ANTHROPIC_API_KEY</code></li> <li>Mistral: <code>MISTRAL_API_KEY</code></li> <li>DeepSeek: <code>DEEPSEEK_API_KEY</code></li> <li>Google: <code>GOOGLE_API_KEY</code></li> </ul> <p>To enable them, simply add their API keys under the names above as environment variables. Eevee Chat will detect these on launch.</p>"},{"location":"frameworks/#supported-models","title":"Supported Models","text":"<p>Technically, all chat models of the supported frameworks are also supported. Still,a s there are many models, only the most common ones were added to Eevee. If the model you're looking for is not on the list, simply open the <code>config.toml</code> file found under Eevee's installation folder, and add it to the relevant list under <code>[models]</code>.</p> <p>You can locate the <code>config.toml</code> file by running: <pre><code>eevee --config-path\n</code></pre></p>"},{"location":"google_search/","title":"Enable Google Search","text":"<p>Models which support tool calling are automatically connected to the web. By default, web search is based on DuckDuckGo, as it enables hassle-free web search.</p> <p>Still, if you'd like to upgrade your web search and use Google Search, you can easily do so by following the following steps:</p> <ol> <li>Go to the Google Cloud Console, and create a new project or select an existing one</li> <li>Navigate to the \"APIs &amp; Services\" dashboard and click on \"ENABLE APIS AND SERVICES\". Search for the Custom Search JSON API and enable it for your project</li> <li>In the API &amp; Services dashboard, go to Credentials. Click on \"Create Credentials\" and select \"API key\". This key is used to authenticate your requests.</li> <li>Save the API key as an environment variable named <code>GOOGLE_SEARCH_API_KEY</code></li> <li>Go to the Google Custom Search Engine page and create a new search engine. Set your search engine to search across all the web</li> <li>Copy the unique identifier for your search engine, referred to as the \"cx\" parameter.</li> <li>Save the identifier as as an environment variable named <code>GOOGLE_SEARCH_CSE_ID</code></li> </ol> <p>Eevee Chat looks for these two environment variables on launch, and if found, Google Search is used.</p>"},{"location":"tools/","title":"Tools &amp; Power-ups","text":"<p>Eevee Chat comes built-in with several tools and power-ups, which provide a native-like experience, as well as some additional power-ups available usually only to developers.</p>"},{"location":"tools/#tools","title":"Tools","text":"<p>Some models were trained to use external tools, such as web search. Models which support tool calling are automatically attached to the following tools:</p> <ul> <li>Web connection: <ul> <li>Web Search: Using Google Search (if enabled), or DuckDuckGo as default</li> <li>Web Surf: Visiting websites, extracting text only</li> </ul> </li> </ul>"},{"location":"tools/#power-ups","title":"Power-ups","text":"<p>Power-ups are usually available only to developers as part of the API functionality. Eevee Chat exposes these to everyone.</p> <ul> <li>JSON Forcing: Activating this option forces the model to output a valid JSON. Note that when enabled, streaming is off.</li> <li>Adjustable System Prompt: Eevee Chat allows you to modify and control the system prompt of the chat. The system prompt can be overwritten and modified during conversation too.</li> </ul>"},{"location":"tools/#known-limitations","title":"Known Limitations","text":"<p>Not all models were trained the same. The table below summarizes some known limitations of the supported frameworks:</p> Framework System Prompt Tool Calling JSON Forcing OpenAI \u2705 \u2705 \u2705 Anthropic \u2705 \u274c \u274c Mistral \u2705 \u2705 \u26a0\ufe0f (Tool calling is not supported when forcing JSON) DeepSeek \u2705 \u274c \u274c Google \u274c \u274c \u274c"}]}